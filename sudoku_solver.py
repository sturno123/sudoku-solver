# -*- coding: utf-8 -*-
"""Sudoku_Solver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cnXHqG9ZJ7ebTIKZyRddmvfdfgqdSpxw
"""

!sudo apt install tesseract-ocr

!pip install pytesseract

#This code was made in google colaboratory, internal functions were used.

import pytesseract as tess
from pytesseract import Output
import shutil
import os
import numpy as np
import random
try:
 from PIL import Image
except ImportError:
 import Image
import cv2 as cv

#Import image from computer.

def read():
  from google.colab.patches import cv2_imshow
  from google.colab import files
  global grid
  uploaded = files.upload()
  filename = next(iter(uploaded))

  image = cv.resize(cv.imread(filename), (900, 900))
   
  grid = [[0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,0]]

  for x in range(9):
    for y in range(9):
      num = tess.image_to_string(image[15 + x*100:(x+1)*100 - 15, 15 + y*100:(y+1)*100 - 15, :],config='--psm 6 --oem 1 -c tessedit_char_whitelist=0123456789',output_type=Output.STRING)  
      if num[0] != "\x0c":
        grid[x][y] = int(num[0])
      else:
        grid[x][y] = 0

  print("   ORIGINAL SUDOKU")
  print(np.matrix(grid))

#Sudoku Solver.

def possible(y,x,n):
  global grid

  for i in range (0,9):
    if (grid[y][i]) == n:
      return False
  for i in range (0,9):
    if (grid[i][x]) == n:
      return False
  x0 = (x//3)*3
  y0 = (y//3)*3
  for i in range(0,3):
    for j in range(0,3):
      if grid[y0+i][x0+j] == n:
        return False
  return True
  
def solve():
  global grid
  for y in range(9):
    for x in range(9):
      if grid[y][x] == 0:
        for n in range (1,10):
          if possible(y,x,n):
            grid[y][x] = n
            solve()
            grid[y][x] = 0
        return
  print("\n    SOLVED SUDOKU")
  print(np.matrix(grid))
  input("")

read()
solve()

